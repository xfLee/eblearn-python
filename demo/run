#!/usr/bin/env python

import sys, os, shutil, socket, time

def_params_mod = 'params.py'

def usage():
    print '%s [-b|--batch] [parameter-file]' % (sys.argv[0],)
    sys.exit(0)

def which_params():
    def ask():
        r = raw_input('Enter input file [%s]> ' % (def_params_mod,))
        if not r.strip(): return def_params_mod
    
    try:
        import readline
        def ask():
            def hook():
                readline.insert_text(def_params_mod)
                readline.redisplay()
            readline.set_pre_input_hook(hook)
            try:
                return raw_input('Enter input file> ')
            finally:
                readline.set_pre_input_hook(None)
    except ImportError:
        pass

    while True:
        r = ask().strip()
        if not r: continue
        if not r.endswith('.py'): r += '.py'
        if os.path.exists(r): return r
        print "File '%s' doesn't exist." % (r,)
    print "Using input file '%s'." % (r,)

interactive = True
def set_batch():
    global interactive
    interactive =False

profiling = False
def set_prof():
    global profiling
    profiling = True

params_mod = def_params_mod
if __name__ == '__main__':
    options = {'-h' : usage,     '--help':    usage,
               '-b' : set_batch, '--batch':   set_batch,
               '-p' : set_prof,  '--profile': set_prof}
    [options[x]() for x in sys.argv if x in options]
    sys.argv = [x for x in sys.argv if x not in options]
    if len(sys.argv) > 1:
        params_mod = sys.argv[1]
    else:
        params_mod = which_params()


if params_mod.endswith('.py'):
    params_mod = params_mod[:-3]

params = __import__(params_mod)

run_dir = os.path.realpath(os.path.dirname(sys.argv[0]))
os.chdir(run_dir)

machine = socket.gethostname().split('.')[0]
timestr = time.strftime('%Y%m%d_%H%M%S')

if not os.path.exists(params.outputs):
    os.makedirs(params.outputs)

savedir = '%s/exper%d_%s_%s' % (params.outputs, params.exper, machine, timestr)
os.makedirs(savedir)

slnk = 'exper%d' % (params.exper,)
if os.path.exists(slnk): os.unlink(slnk)
os.symlink(savedir, slnk)

shutil.copyfile(params_mod +'.py', savedir + '/params.py')
shutil.copyfile(params.script,
                '%s/%s' % (savedir, os.path.basename(params.script)))

def copy_code():
    for imp_mod in sys.modules.values():
        if not imp_mod or '__file__' not in dir(imp_mod):
            continue
        if imp_mod.__name__ == params_mod: continue
        imp_file = imp_mod.__file__
        if imp_file.endswith('.pyc'):
            imp_file = imp_file[:-1]
        imp_dir = os.path.realpath(os.path.dirname(imp_file))
        if imp_dir.startswith(run_dir):
            imp_savedir = savedir + imp_dir[len(run_dir):]
            if not os.path.exists(imp_savedir):
                os.makedirs(imp_savedir)
            shutil.copyfile(imp_file, '%s/%s' % (imp_savedir,
                                                 os.path.basename(imp_file)))

sys.path = [savedir] + sys.path
m_vars = dict(savedir = savedir)

def __page_stats(stats):
    import subprocess
    pager = subprocess.Popen([os.getenv('PAGER', 'less'), '-'],
                             stdin = subprocess.PIPE)
    stats.stream = pager.stdin
    stats.print_stats()
    stats.stream = sys.stdout
    

try:
    if profiling:
        from cProfile import Profile
        from pstats   import Stats
        __profiler = Profile()

        __profiler.runctx(open(params.script), m_vars, m_vars)

        __profiler.dump_stats(savedir+'/prof.out')
        __stats = Stats(__profiler)
        __stats.sort_stats(1)
        __stats.print_stats(20)
        try: __page_stats(__stats)            
        except: pass
    else:
        exec open(params.script) in m_vars
finally:
    copy_code()

if interactive:
    __open_shell = None

    try:
        import IPython.Shell
        __open_shell = IPython.Shell.IPShellEmbed()
    except ImportError:
        import code as __code
        __open_shell = lambda: __code.interact(local=globals())

    globals().update(m_vars)
    __open_shell()
